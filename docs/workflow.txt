**1. Create a word list for every speaker  with `text-perspeaker.ipynb`.** 
      
- Creates one '.csv' file for each of the 40 speakers with the columns 'speaker', 'token' and 'token_duration'.  
      
    *Input:* Buckeye corpus
    
    *Output:* 40 .csv files

---

**2. Create table with data for regression analysis with `regression_data.ipynb`**
- Columns: speakerID, speakerGender, interviewerGender, wordID, wordDur, wordPOS, n_segments, n_syllables, (empty) speech rate column
	 
	*Input:* 'en_us_cmudict_forward.pt' &  Buckeye corpus
  
  *Output:* regression_data dataframe

---

**3. Create one event file for all speakers to use as model input.**
    
    
3.1 Create individual speaker event files with `eventfilesV1.ipynb`
    
- Creates 40 individual event files and then concatenates them into one event file
- The files are comma delimited and the index column is saved 
    
    *Input:* 'en_us_cmudict_forward.pt' & speaker word lists
    
    *Output:* 40 speaker event files, One big event file  
    
	
3.2 Correct the previous event files with `correctingV1eventfiles.ipynb` 
- Tab-delimits the old event files and removes the index column
- Merges them into one big event file
- Sanity checks for missing words with the 'regression_data' dataframe
	
    *Input:* 'regression_data.csv' & old eventfiles
    
    *Output:* correct event file

---

**4. Train the NDL model with `trainNDL.ipynb`**
- Trains an [NDL](https://pyndl.readthedocs.io/en/latest/ndl.html) model using the [`pyndl`](https://pyndl.readthedocs.io/en/latest/) package
	
    *Input:* correct event file
    
    *Output:* weight matrix
    
---  
  
**5. Compute NDL measures with `prior_activation.ipynb`**
- Computes Activation and Prior for the buckeye weights
- Activation and prior are split by domain (Segment, Syllable, Context)
- Appends values to the regression_data dataframe
  
*Input:* 'variablesOtherPrior' python script & correct event file & weight matrix & regression_data
   
*Output:* updated regression_data dataframe 
    
---    
    
**6. Compute speech rate per utterance with `speech_rate.ipynb`**  
- Computes speech rate according to Pause boundaries marked in the buckeye corpus. 

    *Input:* Buckeye corpus
    
    *Output:* updated regression_data dataframe 
  
---  
  
**7. Statistical analysis with `regression_analysis.Rmd`**
- Conducts the statistical analysis outlined in the Methods section of the thesis. 
	- Data transformation and coding, model building, model criticism
	
	*Input:* regression_data.csv
	*Output:* figures 
   
